#include <QtWidgets>
#include <exception>
#include "mainwindow.h"

MainWindow::MainWindow()
{
    openGLWidget * widget = new openGLWidget();
    setCentralWidget(widget);
    createActions();
    createMenus();
    createToolBars();
    createStatusBar();

    readSettings();
}

void MainWindow::closeEvent(QCloseEvent *event)
{
    writeSettings();
    event->accept();
}


void MainWindow::open()
{
    QString result = QInputDialog::getText(0, "Open database connection", "Database name in this format:\nip:port\\dbname");
    if(result.size()){
        QStringList elems = result.split(":");
        if(elems.size()!=2){
            return;
        }
        QString ip = elems.at(0);
        elems = elems.at(1).split("\\");
        if(elems.size()!=2){
            return;
        }
        QString port = elems.at(0);
        QString dbname = elems.at(1);
        statusBar()->showMessage("Connecting to: ip= "+ip+" port= " + port + " dbname=" + dbname,10000);
     }
}

void MainWindow::about()
{
   QMessageBox::about(this, tr("About Application"),
            tr("This application visualizes the map generated by the lidar and shows the position of all the objects, including the position of the Drone and ATV"));
}


void MainWindow::createActions()
{
    openAct = new QAction(QIcon(":/images/open.png"), tr("&Open..."), this);
    openAct->setShortcuts(QKeySequence::Open);
    openAct->setStatusTip(tr("Open a database connection"));
    connect(openAct, SIGNAL(triggered()), this, SLOT(open()));

    exitAct = new QAction(tr("E&xit"), this);
    exitAct->setShortcuts(QKeySequence::Quit);
    exitAct->setStatusTip(tr("Exit the application"));
    connect(exitAct, SIGNAL(triggered()), this, SLOT(close()));

    aboutAct = new QAction(tr("&About"), this);
    aboutAct->setStatusTip(tr("Show the application's About box"));
    connect(aboutAct, SIGNAL(triggered()), this, SLOT(about()));

    aboutQtAct = new QAction(tr("About &Qt"), this);
    aboutQtAct->setStatusTip(tr("Show the Qt library's About box"));
    connect(aboutQtAct, SIGNAL(triggered()), qApp, SLOT(aboutQt()));
}

void MainWindow::createMenus()
{
    fileMenu = menuBar()->addMenu(tr("&File"));
    fileMenu->addAction(openAct);
    fileMenu->addSeparator();
    fileMenu->addAction(exitAct);

    menuBar()->addSeparator();

    helpMenu = menuBar()->addMenu(tr("&Help"));
    helpMenu->addAction(aboutAct);
    helpMenu->addAction(aboutQtAct);
}

void MainWindow::createToolBars()
{
    fileToolBar = addToolBar(("File"));
    fileToolBar->addAction(openAct);
}

void MainWindow::createStatusBar()
{
    statusBar()->showMessage(tr("Ready"));
}

void MainWindow::readSettings()
{
    QSettings settings("RoboRescue", "Roborescue map visualizer");
    QPoint pos = settings.value("pos", QPoint(200, 200)).toPoint();
    QSize size = settings.value("size", QSize(400, 400)).toSize();
    resize(size);
    move(pos);
}

void MainWindow::writeSettings()
{
    QSettings settings("RoboRescue", "Roborescue map visualizer");
    settings.setValue("pos", pos());
    settings.setValue("size", size());
}

